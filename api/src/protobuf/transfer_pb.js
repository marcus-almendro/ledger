// source: transfer.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.transfer.InvalidOperation', null, global);
goog.exportSymbol('proto.transfer.Transfer', null, global);
goog.exportSymbol('proto.transfer.TransferExecuted', null, global);
goog.exportSymbol('proto.transfer.TransferFailedAndCannotRollback', null, global);
goog.exportSymbol('proto.transfer.TransferFailedDueToDepositAccount', null, global);
goog.exportSymbol('proto.transfer.TransferFailedDueToWithdrawAccount', null, global);
goog.exportSymbol('proto.transfer.TransferMessage', null, global);
goog.exportSymbol('proto.transfer.TransferMessage.MsgtypeCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transfer.TransferMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.transfer.TransferMessage.oneofGroups_);
};
goog.inherits(proto.transfer.TransferMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transfer.TransferMessage.displayName = 'proto.transfer.TransferMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transfer.Transfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transfer.Transfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transfer.Transfer.displayName = 'proto.transfer.Transfer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transfer.TransferExecuted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transfer.TransferExecuted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transfer.TransferExecuted.displayName = 'proto.transfer.TransferExecuted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transfer.TransferFailedDueToWithdrawAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transfer.TransferFailedDueToWithdrawAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transfer.TransferFailedDueToWithdrawAccount.displayName = 'proto.transfer.TransferFailedDueToWithdrawAccount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transfer.TransferFailedDueToDepositAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transfer.TransferFailedDueToDepositAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transfer.TransferFailedDueToDepositAccount.displayName = 'proto.transfer.TransferFailedDueToDepositAccount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transfer.TransferFailedAndCannotRollback = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transfer.TransferFailedAndCannotRollback, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transfer.TransferFailedAndCannotRollback.displayName = 'proto.transfer.TransferFailedAndCannotRollback';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transfer.InvalidOperation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transfer.InvalidOperation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transfer.InvalidOperation.displayName = 'proto.transfer.InvalidOperation';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.transfer.TransferMessage.oneofGroups_ = [[20,40,60,61,62,63]];

/**
 * @enum {number}
 */
proto.transfer.TransferMessage.MsgtypeCase = {
  MSGTYPE_NOT_SET: 0,
  TRANSFER: 20,
  TRANSFEREXECUTED: 40,
  TRANSFERFAILEDDUETOWITHDRAWACCOUNT: 60,
  TRANSFERFAILEDDUETODEPOSITACCOUNT: 61,
  TRANSFERFAILEDANDCANNOTROLLBACK: 62,
  INVALIDOPERATION: 63
};

/**
 * @return {proto.transfer.TransferMessage.MsgtypeCase}
 */
proto.transfer.TransferMessage.prototype.getMsgtypeCase = function() {
  return /** @type {proto.transfer.TransferMessage.MsgtypeCase} */(jspb.Message.computeOneofCase(this, proto.transfer.TransferMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transfer.TransferMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.transfer.TransferMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transfer.TransferMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transfer.TransferMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    correlationid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    transfer: (f = msg.getTransfer()) && proto.transfer.Transfer.toObject(includeInstance, f),
    transferexecuted: (f = msg.getTransferexecuted()) && proto.transfer.TransferExecuted.toObject(includeInstance, f),
    transferfailedduetowithdrawaccount: (f = msg.getTransferfailedduetowithdrawaccount()) && proto.transfer.TransferFailedDueToWithdrawAccount.toObject(includeInstance, f),
    transferfailedduetodepositaccount: (f = msg.getTransferfailedduetodepositaccount()) && proto.transfer.TransferFailedDueToDepositAccount.toObject(includeInstance, f),
    transferfailedandcannotrollback: (f = msg.getTransferfailedandcannotrollback()) && proto.transfer.TransferFailedAndCannotRollback.toObject(includeInstance, f),
    invalidoperation: (f = msg.getInvalidoperation()) && proto.transfer.InvalidOperation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transfer.TransferMessage}
 */
proto.transfer.TransferMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transfer.TransferMessage;
  return proto.transfer.TransferMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transfer.TransferMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transfer.TransferMessage}
 */
proto.transfer.TransferMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationid(value);
      break;
    case 20:
      var value = new proto.transfer.Transfer;
      reader.readMessage(value,proto.transfer.Transfer.deserializeBinaryFromReader);
      msg.setTransfer(value);
      break;
    case 40:
      var value = new proto.transfer.TransferExecuted;
      reader.readMessage(value,proto.transfer.TransferExecuted.deserializeBinaryFromReader);
      msg.setTransferexecuted(value);
      break;
    case 60:
      var value = new proto.transfer.TransferFailedDueToWithdrawAccount;
      reader.readMessage(value,proto.transfer.TransferFailedDueToWithdrawAccount.deserializeBinaryFromReader);
      msg.setTransferfailedduetowithdrawaccount(value);
      break;
    case 61:
      var value = new proto.transfer.TransferFailedDueToDepositAccount;
      reader.readMessage(value,proto.transfer.TransferFailedDueToDepositAccount.deserializeBinaryFromReader);
      msg.setTransferfailedduetodepositaccount(value);
      break;
    case 62:
      var value = new proto.transfer.TransferFailedAndCannotRollback;
      reader.readMessage(value,proto.transfer.TransferFailedAndCannotRollback.deserializeBinaryFromReader);
      msg.setTransferfailedandcannotrollback(value);
      break;
    case 63:
      var value = new proto.transfer.InvalidOperation;
      reader.readMessage(value,proto.transfer.InvalidOperation.deserializeBinaryFromReader);
      msg.setInvalidoperation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transfer.TransferMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transfer.TransferMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transfer.TransferMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transfer.TransferMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCorrelationid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTransfer();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.transfer.Transfer.serializeBinaryToWriter
    );
  }
  f = message.getTransferexecuted();
  if (f != null) {
    writer.writeMessage(
      40,
      f,
      proto.transfer.TransferExecuted.serializeBinaryToWriter
    );
  }
  f = message.getTransferfailedduetowithdrawaccount();
  if (f != null) {
    writer.writeMessage(
      60,
      f,
      proto.transfer.TransferFailedDueToWithdrawAccount.serializeBinaryToWriter
    );
  }
  f = message.getTransferfailedduetodepositaccount();
  if (f != null) {
    writer.writeMessage(
      61,
      f,
      proto.transfer.TransferFailedDueToDepositAccount.serializeBinaryToWriter
    );
  }
  f = message.getTransferfailedandcannotrollback();
  if (f != null) {
    writer.writeMessage(
      62,
      f,
      proto.transfer.TransferFailedAndCannotRollback.serializeBinaryToWriter
    );
  }
  f = message.getInvalidoperation();
  if (f != null) {
    writer.writeMessage(
      63,
      f,
      proto.transfer.InvalidOperation.serializeBinaryToWriter
    );
  }
};


/**
 * optional string correlationId = 1;
 * @return {string}
 */
proto.transfer.TransferMessage.prototype.getCorrelationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.transfer.TransferMessage} returns this
 */
proto.transfer.TransferMessage.prototype.setCorrelationid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Transfer transfer = 20;
 * @return {?proto.transfer.Transfer}
 */
proto.transfer.TransferMessage.prototype.getTransfer = function() {
  return /** @type{?proto.transfer.Transfer} */ (
    jspb.Message.getWrapperField(this, proto.transfer.Transfer, 20));
};


/**
 * @param {?proto.transfer.Transfer|undefined} value
 * @return {!proto.transfer.TransferMessage} returns this
*/
proto.transfer.TransferMessage.prototype.setTransfer = function(value) {
  return jspb.Message.setOneofWrapperField(this, 20, proto.transfer.TransferMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transfer.TransferMessage} returns this
 */
proto.transfer.TransferMessage.prototype.clearTransfer = function() {
  return this.setTransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transfer.TransferMessage.prototype.hasTransfer = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional TransferExecuted transferExecuted = 40;
 * @return {?proto.transfer.TransferExecuted}
 */
proto.transfer.TransferMessage.prototype.getTransferexecuted = function() {
  return /** @type{?proto.transfer.TransferExecuted} */ (
    jspb.Message.getWrapperField(this, proto.transfer.TransferExecuted, 40));
};


/**
 * @param {?proto.transfer.TransferExecuted|undefined} value
 * @return {!proto.transfer.TransferMessage} returns this
*/
proto.transfer.TransferMessage.prototype.setTransferexecuted = function(value) {
  return jspb.Message.setOneofWrapperField(this, 40, proto.transfer.TransferMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transfer.TransferMessage} returns this
 */
proto.transfer.TransferMessage.prototype.clearTransferexecuted = function() {
  return this.setTransferexecuted(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transfer.TransferMessage.prototype.hasTransferexecuted = function() {
  return jspb.Message.getField(this, 40) != null;
};


/**
 * optional TransferFailedDueToWithdrawAccount transferFailedDueToWithdrawAccount = 60;
 * @return {?proto.transfer.TransferFailedDueToWithdrawAccount}
 */
proto.transfer.TransferMessage.prototype.getTransferfailedduetowithdrawaccount = function() {
  return /** @type{?proto.transfer.TransferFailedDueToWithdrawAccount} */ (
    jspb.Message.getWrapperField(this, proto.transfer.TransferFailedDueToWithdrawAccount, 60));
};


/**
 * @param {?proto.transfer.TransferFailedDueToWithdrawAccount|undefined} value
 * @return {!proto.transfer.TransferMessage} returns this
*/
proto.transfer.TransferMessage.prototype.setTransferfailedduetowithdrawaccount = function(value) {
  return jspb.Message.setOneofWrapperField(this, 60, proto.transfer.TransferMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transfer.TransferMessage} returns this
 */
proto.transfer.TransferMessage.prototype.clearTransferfailedduetowithdrawaccount = function() {
  return this.setTransferfailedduetowithdrawaccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transfer.TransferMessage.prototype.hasTransferfailedduetowithdrawaccount = function() {
  return jspb.Message.getField(this, 60) != null;
};


/**
 * optional TransferFailedDueToDepositAccount transferFailedDueToDepositAccount = 61;
 * @return {?proto.transfer.TransferFailedDueToDepositAccount}
 */
proto.transfer.TransferMessage.prototype.getTransferfailedduetodepositaccount = function() {
  return /** @type{?proto.transfer.TransferFailedDueToDepositAccount} */ (
    jspb.Message.getWrapperField(this, proto.transfer.TransferFailedDueToDepositAccount, 61));
};


/**
 * @param {?proto.transfer.TransferFailedDueToDepositAccount|undefined} value
 * @return {!proto.transfer.TransferMessage} returns this
*/
proto.transfer.TransferMessage.prototype.setTransferfailedduetodepositaccount = function(value) {
  return jspb.Message.setOneofWrapperField(this, 61, proto.transfer.TransferMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transfer.TransferMessage} returns this
 */
proto.transfer.TransferMessage.prototype.clearTransferfailedduetodepositaccount = function() {
  return this.setTransferfailedduetodepositaccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transfer.TransferMessage.prototype.hasTransferfailedduetodepositaccount = function() {
  return jspb.Message.getField(this, 61) != null;
};


/**
 * optional TransferFailedAndCannotRollback transferFailedAndCannotRollback = 62;
 * @return {?proto.transfer.TransferFailedAndCannotRollback}
 */
proto.transfer.TransferMessage.prototype.getTransferfailedandcannotrollback = function() {
  return /** @type{?proto.transfer.TransferFailedAndCannotRollback} */ (
    jspb.Message.getWrapperField(this, proto.transfer.TransferFailedAndCannotRollback, 62));
};


/**
 * @param {?proto.transfer.TransferFailedAndCannotRollback|undefined} value
 * @return {!proto.transfer.TransferMessage} returns this
*/
proto.transfer.TransferMessage.prototype.setTransferfailedandcannotrollback = function(value) {
  return jspb.Message.setOneofWrapperField(this, 62, proto.transfer.TransferMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transfer.TransferMessage} returns this
 */
proto.transfer.TransferMessage.prototype.clearTransferfailedandcannotrollback = function() {
  return this.setTransferfailedandcannotrollback(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transfer.TransferMessage.prototype.hasTransferfailedandcannotrollback = function() {
  return jspb.Message.getField(this, 62) != null;
};


/**
 * optional InvalidOperation invalidOperation = 63;
 * @return {?proto.transfer.InvalidOperation}
 */
proto.transfer.TransferMessage.prototype.getInvalidoperation = function() {
  return /** @type{?proto.transfer.InvalidOperation} */ (
    jspb.Message.getWrapperField(this, proto.transfer.InvalidOperation, 63));
};


/**
 * @param {?proto.transfer.InvalidOperation|undefined} value
 * @return {!proto.transfer.TransferMessage} returns this
*/
proto.transfer.TransferMessage.prototype.setInvalidoperation = function(value) {
  return jspb.Message.setOneofWrapperField(this, 63, proto.transfer.TransferMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transfer.TransferMessage} returns this
 */
proto.transfer.TransferMessage.prototype.clearInvalidoperation = function() {
  return this.setInvalidoperation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transfer.TransferMessage.prototype.hasInvalidoperation = function() {
  return jspb.Message.getField(this, 63) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transfer.Transfer.prototype.toObject = function(opt_includeInstance) {
  return proto.transfer.Transfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transfer.Transfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transfer.Transfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromaccountid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    toaccountid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transfer.Transfer}
 */
proto.transfer.Transfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transfer.Transfer;
  return proto.transfer.Transfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transfer.Transfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transfer.Transfer}
 */
proto.transfer.Transfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFromaccountid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setToaccountid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transfer.Transfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transfer.Transfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transfer.Transfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transfer.Transfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromaccountid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getToaccountid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 fromAccountId = 1;
 * @return {number}
 */
proto.transfer.Transfer.prototype.getFromaccountid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.transfer.Transfer} returns this
 */
proto.transfer.Transfer.prototype.setFromaccountid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 toAccountId = 2;
 * @return {number}
 */
proto.transfer.Transfer.prototype.getToaccountid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.transfer.Transfer} returns this
 */
proto.transfer.Transfer.prototype.setToaccountid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string amount = 3;
 * @return {string}
 */
proto.transfer.Transfer.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.transfer.Transfer} returns this
 */
proto.transfer.Transfer.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transfer.TransferExecuted.prototype.toObject = function(opt_includeInstance) {
  return proto.transfer.TransferExecuted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transfer.TransferExecuted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transfer.TransferExecuted.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transfer.TransferExecuted}
 */
proto.transfer.TransferExecuted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transfer.TransferExecuted;
  return proto.transfer.TransferExecuted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transfer.TransferExecuted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transfer.TransferExecuted}
 */
proto.transfer.TransferExecuted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transfer.TransferExecuted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transfer.TransferExecuted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transfer.TransferExecuted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transfer.TransferExecuted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 timestamp = 1;
 * @return {number}
 */
proto.transfer.TransferExecuted.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.transfer.TransferExecuted} returns this
 */
proto.transfer.TransferExecuted.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transfer.TransferFailedDueToWithdrawAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.transfer.TransferFailedDueToWithdrawAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transfer.TransferFailedDueToWithdrawAccount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transfer.TransferFailedDueToWithdrawAccount.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transfer.TransferFailedDueToWithdrawAccount}
 */
proto.transfer.TransferFailedDueToWithdrawAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transfer.TransferFailedDueToWithdrawAccount;
  return proto.transfer.TransferFailedDueToWithdrawAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transfer.TransferFailedDueToWithdrawAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transfer.TransferFailedDueToWithdrawAccount}
 */
proto.transfer.TransferFailedDueToWithdrawAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transfer.TransferFailedDueToWithdrawAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transfer.TransferFailedDueToWithdrawAccount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transfer.TransferFailedDueToWithdrawAccount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transfer.TransferFailedDueToWithdrawAccount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transfer.TransferFailedDueToDepositAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.transfer.TransferFailedDueToDepositAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transfer.TransferFailedDueToDepositAccount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transfer.TransferFailedDueToDepositAccount.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transfer.TransferFailedDueToDepositAccount}
 */
proto.transfer.TransferFailedDueToDepositAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transfer.TransferFailedDueToDepositAccount;
  return proto.transfer.TransferFailedDueToDepositAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transfer.TransferFailedDueToDepositAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transfer.TransferFailedDueToDepositAccount}
 */
proto.transfer.TransferFailedDueToDepositAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transfer.TransferFailedDueToDepositAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transfer.TransferFailedDueToDepositAccount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transfer.TransferFailedDueToDepositAccount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transfer.TransferFailedDueToDepositAccount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transfer.TransferFailedAndCannotRollback.prototype.toObject = function(opt_includeInstance) {
  return proto.transfer.TransferFailedAndCannotRollback.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transfer.TransferFailedAndCannotRollback} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transfer.TransferFailedAndCannotRollback.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transfer.TransferFailedAndCannotRollback}
 */
proto.transfer.TransferFailedAndCannotRollback.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transfer.TransferFailedAndCannotRollback;
  return proto.transfer.TransferFailedAndCannotRollback.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transfer.TransferFailedAndCannotRollback} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transfer.TransferFailedAndCannotRollback}
 */
proto.transfer.TransferFailedAndCannotRollback.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transfer.TransferFailedAndCannotRollback.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transfer.TransferFailedAndCannotRollback.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transfer.TransferFailedAndCannotRollback} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transfer.TransferFailedAndCannotRollback.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transfer.InvalidOperation.prototype.toObject = function(opt_includeInstance) {
  return proto.transfer.InvalidOperation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transfer.InvalidOperation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transfer.InvalidOperation.toObject = function(includeInstance, msg) {
  var f, obj = {
    reason: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transfer.InvalidOperation}
 */
proto.transfer.InvalidOperation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transfer.InvalidOperation;
  return proto.transfer.InvalidOperation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transfer.InvalidOperation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transfer.InvalidOperation}
 */
proto.transfer.InvalidOperation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transfer.InvalidOperation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transfer.InvalidOperation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transfer.InvalidOperation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transfer.InvalidOperation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string reason = 1;
 * @return {string}
 */
proto.transfer.InvalidOperation.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.transfer.InvalidOperation} returns this
 */
proto.transfer.InvalidOperation.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.transfer);
