// source: account.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.account.AccountBlocked', null, global);
goog.exportSymbol('proto.account.AccountClosed', null, global);
goog.exportSymbol('proto.account.AccountMessage', null, global);
goog.exportSymbol('proto.account.AccountMessage.MsgtypeCase', null, global);
goog.exportSymbol('proto.account.AccountOpened', null, global);
goog.exportSymbol('proto.account.AccountUnblocked', null, global);
goog.exportSymbol('proto.account.BlockAccount', null, global);
goog.exportSymbol('proto.account.CancelWithdraw', null, global);
goog.exportSymbol('proto.account.CloseAccount', null, global);
goog.exportSymbol('proto.account.Deposit', null, global);
goog.exportSymbol('proto.account.Deposited', null, global);
goog.exportSymbol('proto.account.InsufficientFunds', null, global);
goog.exportSymbol('proto.account.InvalidOperation', null, global);
goog.exportSymbol('proto.account.OpenAccount', null, global);
goog.exportSymbol('proto.account.UnblockAccount', null, global);
goog.exportSymbol('proto.account.Withdraw', null, global);
goog.exportSymbol('proto.account.WithdrawCancelled', null, global);
goog.exportSymbol('proto.account.Withdrawn', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.AccountMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.account.AccountMessage.oneofGroups_);
};
goog.inherits(proto.account.AccountMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.AccountMessage.displayName = 'proto.account.AccountMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.OpenAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.OpenAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.OpenAccount.displayName = 'proto.account.OpenAccount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.CloseAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.CloseAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.CloseAccount.displayName = 'proto.account.CloseAccount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.BlockAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.BlockAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.BlockAccount.displayName = 'proto.account.BlockAccount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.UnblockAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.UnblockAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.UnblockAccount.displayName = 'proto.account.UnblockAccount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.Withdraw = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.Withdraw, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.Withdraw.displayName = 'proto.account.Withdraw';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.Deposit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.Deposit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.Deposit.displayName = 'proto.account.Deposit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.CancelWithdraw = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.CancelWithdraw, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.CancelWithdraw.displayName = 'proto.account.CancelWithdraw';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.AccountOpened = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.AccountOpened, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.AccountOpened.displayName = 'proto.account.AccountOpened';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.AccountClosed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.AccountClosed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.AccountClosed.displayName = 'proto.account.AccountClosed';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.AccountBlocked = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.AccountBlocked, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.AccountBlocked.displayName = 'proto.account.AccountBlocked';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.AccountUnblocked = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.AccountUnblocked, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.AccountUnblocked.displayName = 'proto.account.AccountUnblocked';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.Withdrawn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.Withdrawn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.Withdrawn.displayName = 'proto.account.Withdrawn';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.Deposited = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.Deposited, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.Deposited.displayName = 'proto.account.Deposited';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.WithdrawCancelled = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.WithdrawCancelled, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.WithdrawCancelled.displayName = 'proto.account.WithdrawCancelled';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.InvalidOperation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.InvalidOperation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.InvalidOperation.displayName = 'proto.account.InvalidOperation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.account.InsufficientFunds = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.account.InsufficientFunds, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.account.InsufficientFunds.displayName = 'proto.account.InsufficientFunds';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.account.AccountMessage.oneofGroups_ = [[20,21,22,23,24,25,26,40,41,42,43,44,45,46,60,61]];

/**
 * @enum {number}
 */
proto.account.AccountMessage.MsgtypeCase = {
  MSGTYPE_NOT_SET: 0,
  OPENACCOUNT: 20,
  CLOSEACCOUNT: 21,
  BLOCKACCOUNT: 22,
  UNBLOCKACCOUNT: 23,
  WITHDRAW: 24,
  DEPOSIT: 25,
  CANCELWITHDRAW: 26,
  ACCOUNTOPENED: 40,
  ACCOUNTCLOSED: 41,
  ACCOUNTBLOCKED: 42,
  ACCOUNTUNBLOCKED: 43,
  WITHDRAWN: 44,
  DEPOSITED: 45,
  WITHDRAWCANCELLED: 46,
  INVALIDOPERATION: 60,
  INSUFFICIENTFUNDS: 61
};

/**
 * @return {proto.account.AccountMessage.MsgtypeCase}
 */
proto.account.AccountMessage.prototype.getMsgtypeCase = function() {
  return /** @type {proto.account.AccountMessage.MsgtypeCase} */(jspb.Message.computeOneofCase(this, proto.account.AccountMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.AccountMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.account.AccountMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.AccountMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.AccountMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    correlationid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    openaccount: (f = msg.getOpenaccount()) && proto.account.OpenAccount.toObject(includeInstance, f),
    closeaccount: (f = msg.getCloseaccount()) && proto.account.CloseAccount.toObject(includeInstance, f),
    blockaccount: (f = msg.getBlockaccount()) && proto.account.BlockAccount.toObject(includeInstance, f),
    unblockaccount: (f = msg.getUnblockaccount()) && proto.account.UnblockAccount.toObject(includeInstance, f),
    withdraw: (f = msg.getWithdraw()) && proto.account.Withdraw.toObject(includeInstance, f),
    deposit: (f = msg.getDeposit()) && proto.account.Deposit.toObject(includeInstance, f),
    cancelwithdraw: (f = msg.getCancelwithdraw()) && proto.account.CancelWithdraw.toObject(includeInstance, f),
    accountopened: (f = msg.getAccountopened()) && proto.account.AccountOpened.toObject(includeInstance, f),
    accountclosed: (f = msg.getAccountclosed()) && proto.account.AccountClosed.toObject(includeInstance, f),
    accountblocked: (f = msg.getAccountblocked()) && proto.account.AccountBlocked.toObject(includeInstance, f),
    accountunblocked: (f = msg.getAccountunblocked()) && proto.account.AccountUnblocked.toObject(includeInstance, f),
    withdrawn: (f = msg.getWithdrawn()) && proto.account.Withdrawn.toObject(includeInstance, f),
    deposited: (f = msg.getDeposited()) && proto.account.Deposited.toObject(includeInstance, f),
    withdrawcancelled: (f = msg.getWithdrawcancelled()) && proto.account.WithdrawCancelled.toObject(includeInstance, f),
    invalidoperation: (f = msg.getInvalidoperation()) && proto.account.InvalidOperation.toObject(includeInstance, f),
    insufficientfunds: (f = msg.getInsufficientfunds()) && proto.account.InsufficientFunds.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.AccountMessage}
 */
proto.account.AccountMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.AccountMessage;
  return proto.account.AccountMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.AccountMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.AccountMessage}
 */
proto.account.AccountMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAccountid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCorrelationid(value);
      break;
    case 20:
      var value = new proto.account.OpenAccount;
      reader.readMessage(value,proto.account.OpenAccount.deserializeBinaryFromReader);
      msg.setOpenaccount(value);
      break;
    case 21:
      var value = new proto.account.CloseAccount;
      reader.readMessage(value,proto.account.CloseAccount.deserializeBinaryFromReader);
      msg.setCloseaccount(value);
      break;
    case 22:
      var value = new proto.account.BlockAccount;
      reader.readMessage(value,proto.account.BlockAccount.deserializeBinaryFromReader);
      msg.setBlockaccount(value);
      break;
    case 23:
      var value = new proto.account.UnblockAccount;
      reader.readMessage(value,proto.account.UnblockAccount.deserializeBinaryFromReader);
      msg.setUnblockaccount(value);
      break;
    case 24:
      var value = new proto.account.Withdraw;
      reader.readMessage(value,proto.account.Withdraw.deserializeBinaryFromReader);
      msg.setWithdraw(value);
      break;
    case 25:
      var value = new proto.account.Deposit;
      reader.readMessage(value,proto.account.Deposit.deserializeBinaryFromReader);
      msg.setDeposit(value);
      break;
    case 26:
      var value = new proto.account.CancelWithdraw;
      reader.readMessage(value,proto.account.CancelWithdraw.deserializeBinaryFromReader);
      msg.setCancelwithdraw(value);
      break;
    case 40:
      var value = new proto.account.AccountOpened;
      reader.readMessage(value,proto.account.AccountOpened.deserializeBinaryFromReader);
      msg.setAccountopened(value);
      break;
    case 41:
      var value = new proto.account.AccountClosed;
      reader.readMessage(value,proto.account.AccountClosed.deserializeBinaryFromReader);
      msg.setAccountclosed(value);
      break;
    case 42:
      var value = new proto.account.AccountBlocked;
      reader.readMessage(value,proto.account.AccountBlocked.deserializeBinaryFromReader);
      msg.setAccountblocked(value);
      break;
    case 43:
      var value = new proto.account.AccountUnblocked;
      reader.readMessage(value,proto.account.AccountUnblocked.deserializeBinaryFromReader);
      msg.setAccountunblocked(value);
      break;
    case 44:
      var value = new proto.account.Withdrawn;
      reader.readMessage(value,proto.account.Withdrawn.deserializeBinaryFromReader);
      msg.setWithdrawn(value);
      break;
    case 45:
      var value = new proto.account.Deposited;
      reader.readMessage(value,proto.account.Deposited.deserializeBinaryFromReader);
      msg.setDeposited(value);
      break;
    case 46:
      var value = new proto.account.WithdrawCancelled;
      reader.readMessage(value,proto.account.WithdrawCancelled.deserializeBinaryFromReader);
      msg.setWithdrawcancelled(value);
      break;
    case 60:
      var value = new proto.account.InvalidOperation;
      reader.readMessage(value,proto.account.InvalidOperation.deserializeBinaryFromReader);
      msg.setInvalidoperation(value);
      break;
    case 61:
      var value = new proto.account.InsufficientFunds;
      reader.readMessage(value,proto.account.InsufficientFunds.deserializeBinaryFromReader);
      msg.setInsufficientfunds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.AccountMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.AccountMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.AccountMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.AccountMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCorrelationid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOpenaccount();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.account.OpenAccount.serializeBinaryToWriter
    );
  }
  f = message.getCloseaccount();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.account.CloseAccount.serializeBinaryToWriter
    );
  }
  f = message.getBlockaccount();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.account.BlockAccount.serializeBinaryToWriter
    );
  }
  f = message.getUnblockaccount();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.account.UnblockAccount.serializeBinaryToWriter
    );
  }
  f = message.getWithdraw();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.account.Withdraw.serializeBinaryToWriter
    );
  }
  f = message.getDeposit();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.account.Deposit.serializeBinaryToWriter
    );
  }
  f = message.getCancelwithdraw();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      proto.account.CancelWithdraw.serializeBinaryToWriter
    );
  }
  f = message.getAccountopened();
  if (f != null) {
    writer.writeMessage(
      40,
      f,
      proto.account.AccountOpened.serializeBinaryToWriter
    );
  }
  f = message.getAccountclosed();
  if (f != null) {
    writer.writeMessage(
      41,
      f,
      proto.account.AccountClosed.serializeBinaryToWriter
    );
  }
  f = message.getAccountblocked();
  if (f != null) {
    writer.writeMessage(
      42,
      f,
      proto.account.AccountBlocked.serializeBinaryToWriter
    );
  }
  f = message.getAccountunblocked();
  if (f != null) {
    writer.writeMessage(
      43,
      f,
      proto.account.AccountUnblocked.serializeBinaryToWriter
    );
  }
  f = message.getWithdrawn();
  if (f != null) {
    writer.writeMessage(
      44,
      f,
      proto.account.Withdrawn.serializeBinaryToWriter
    );
  }
  f = message.getDeposited();
  if (f != null) {
    writer.writeMessage(
      45,
      f,
      proto.account.Deposited.serializeBinaryToWriter
    );
  }
  f = message.getWithdrawcancelled();
  if (f != null) {
    writer.writeMessage(
      46,
      f,
      proto.account.WithdrawCancelled.serializeBinaryToWriter
    );
  }
  f = message.getInvalidoperation();
  if (f != null) {
    writer.writeMessage(
      60,
      f,
      proto.account.InvalidOperation.serializeBinaryToWriter
    );
  }
  f = message.getInsufficientfunds();
  if (f != null) {
    writer.writeMessage(
      61,
      f,
      proto.account.InsufficientFunds.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 accountId = 1;
 * @return {number}
 */
proto.account.AccountMessage.prototype.getAccountid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.account.AccountMessage} returns this
 */
proto.account.AccountMessage.prototype.setAccountid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string correlationId = 2;
 * @return {string}
 */
proto.account.AccountMessage.prototype.getCorrelationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.AccountMessage} returns this
 */
proto.account.AccountMessage.prototype.setCorrelationid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional OpenAccount openAccount = 20;
 * @return {?proto.account.OpenAccount}
 */
proto.account.AccountMessage.prototype.getOpenaccount = function() {
  return /** @type{?proto.account.OpenAccount} */ (
    jspb.Message.getWrapperField(this, proto.account.OpenAccount, 20));
};


/**
 * @param {?proto.account.OpenAccount|undefined} value
 * @return {!proto.account.AccountMessage} returns this
*/
proto.account.AccountMessage.prototype.setOpenaccount = function(value) {
  return jspb.Message.setOneofWrapperField(this, 20, proto.account.AccountMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.AccountMessage} returns this
 */
proto.account.AccountMessage.prototype.clearOpenaccount = function() {
  return this.setOpenaccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.AccountMessage.prototype.hasOpenaccount = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional CloseAccount closeAccount = 21;
 * @return {?proto.account.CloseAccount}
 */
proto.account.AccountMessage.prototype.getCloseaccount = function() {
  return /** @type{?proto.account.CloseAccount} */ (
    jspb.Message.getWrapperField(this, proto.account.CloseAccount, 21));
};


/**
 * @param {?proto.account.CloseAccount|undefined} value
 * @return {!proto.account.AccountMessage} returns this
*/
proto.account.AccountMessage.prototype.setCloseaccount = function(value) {
  return jspb.Message.setOneofWrapperField(this, 21, proto.account.AccountMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.AccountMessage} returns this
 */
proto.account.AccountMessage.prototype.clearCloseaccount = function() {
  return this.setCloseaccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.AccountMessage.prototype.hasCloseaccount = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional BlockAccount blockAccount = 22;
 * @return {?proto.account.BlockAccount}
 */
proto.account.AccountMessage.prototype.getBlockaccount = function() {
  return /** @type{?proto.account.BlockAccount} */ (
    jspb.Message.getWrapperField(this, proto.account.BlockAccount, 22));
};


/**
 * @param {?proto.account.BlockAccount|undefined} value
 * @return {!proto.account.AccountMessage} returns this
*/
proto.account.AccountMessage.prototype.setBlockaccount = function(value) {
  return jspb.Message.setOneofWrapperField(this, 22, proto.account.AccountMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.AccountMessage} returns this
 */
proto.account.AccountMessage.prototype.clearBlockaccount = function() {
  return this.setBlockaccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.AccountMessage.prototype.hasBlockaccount = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional UnblockAccount unblockAccount = 23;
 * @return {?proto.account.UnblockAccount}
 */
proto.account.AccountMessage.prototype.getUnblockaccount = function() {
  return /** @type{?proto.account.UnblockAccount} */ (
    jspb.Message.getWrapperField(this, proto.account.UnblockAccount, 23));
};


/**
 * @param {?proto.account.UnblockAccount|undefined} value
 * @return {!proto.account.AccountMessage} returns this
*/
proto.account.AccountMessage.prototype.setUnblockaccount = function(value) {
  return jspb.Message.setOneofWrapperField(this, 23, proto.account.AccountMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.AccountMessage} returns this
 */
proto.account.AccountMessage.prototype.clearUnblockaccount = function() {
  return this.setUnblockaccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.AccountMessage.prototype.hasUnblockaccount = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional Withdraw withdraw = 24;
 * @return {?proto.account.Withdraw}
 */
proto.account.AccountMessage.prototype.getWithdraw = function() {
  return /** @type{?proto.account.Withdraw} */ (
    jspb.Message.getWrapperField(this, proto.account.Withdraw, 24));
};


/**
 * @param {?proto.account.Withdraw|undefined} value
 * @return {!proto.account.AccountMessage} returns this
*/
proto.account.AccountMessage.prototype.setWithdraw = function(value) {
  return jspb.Message.setOneofWrapperField(this, 24, proto.account.AccountMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.AccountMessage} returns this
 */
proto.account.AccountMessage.prototype.clearWithdraw = function() {
  return this.setWithdraw(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.AccountMessage.prototype.hasWithdraw = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional Deposit deposit = 25;
 * @return {?proto.account.Deposit}
 */
proto.account.AccountMessage.prototype.getDeposit = function() {
  return /** @type{?proto.account.Deposit} */ (
    jspb.Message.getWrapperField(this, proto.account.Deposit, 25));
};


/**
 * @param {?proto.account.Deposit|undefined} value
 * @return {!proto.account.AccountMessage} returns this
*/
proto.account.AccountMessage.prototype.setDeposit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 25, proto.account.AccountMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.AccountMessage} returns this
 */
proto.account.AccountMessage.prototype.clearDeposit = function() {
  return this.setDeposit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.AccountMessage.prototype.hasDeposit = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional CancelWithdraw cancelWithdraw = 26;
 * @return {?proto.account.CancelWithdraw}
 */
proto.account.AccountMessage.prototype.getCancelwithdraw = function() {
  return /** @type{?proto.account.CancelWithdraw} */ (
    jspb.Message.getWrapperField(this, proto.account.CancelWithdraw, 26));
};


/**
 * @param {?proto.account.CancelWithdraw|undefined} value
 * @return {!proto.account.AccountMessage} returns this
*/
proto.account.AccountMessage.prototype.setCancelwithdraw = function(value) {
  return jspb.Message.setOneofWrapperField(this, 26, proto.account.AccountMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.AccountMessage} returns this
 */
proto.account.AccountMessage.prototype.clearCancelwithdraw = function() {
  return this.setCancelwithdraw(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.AccountMessage.prototype.hasCancelwithdraw = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional AccountOpened accountOpened = 40;
 * @return {?proto.account.AccountOpened}
 */
proto.account.AccountMessage.prototype.getAccountopened = function() {
  return /** @type{?proto.account.AccountOpened} */ (
    jspb.Message.getWrapperField(this, proto.account.AccountOpened, 40));
};


/**
 * @param {?proto.account.AccountOpened|undefined} value
 * @return {!proto.account.AccountMessage} returns this
*/
proto.account.AccountMessage.prototype.setAccountopened = function(value) {
  return jspb.Message.setOneofWrapperField(this, 40, proto.account.AccountMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.AccountMessage} returns this
 */
proto.account.AccountMessage.prototype.clearAccountopened = function() {
  return this.setAccountopened(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.AccountMessage.prototype.hasAccountopened = function() {
  return jspb.Message.getField(this, 40) != null;
};


/**
 * optional AccountClosed accountClosed = 41;
 * @return {?proto.account.AccountClosed}
 */
proto.account.AccountMessage.prototype.getAccountclosed = function() {
  return /** @type{?proto.account.AccountClosed} */ (
    jspb.Message.getWrapperField(this, proto.account.AccountClosed, 41));
};


/**
 * @param {?proto.account.AccountClosed|undefined} value
 * @return {!proto.account.AccountMessage} returns this
*/
proto.account.AccountMessage.prototype.setAccountclosed = function(value) {
  return jspb.Message.setOneofWrapperField(this, 41, proto.account.AccountMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.AccountMessage} returns this
 */
proto.account.AccountMessage.prototype.clearAccountclosed = function() {
  return this.setAccountclosed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.AccountMessage.prototype.hasAccountclosed = function() {
  return jspb.Message.getField(this, 41) != null;
};


/**
 * optional AccountBlocked accountBlocked = 42;
 * @return {?proto.account.AccountBlocked}
 */
proto.account.AccountMessage.prototype.getAccountblocked = function() {
  return /** @type{?proto.account.AccountBlocked} */ (
    jspb.Message.getWrapperField(this, proto.account.AccountBlocked, 42));
};


/**
 * @param {?proto.account.AccountBlocked|undefined} value
 * @return {!proto.account.AccountMessage} returns this
*/
proto.account.AccountMessage.prototype.setAccountblocked = function(value) {
  return jspb.Message.setOneofWrapperField(this, 42, proto.account.AccountMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.AccountMessage} returns this
 */
proto.account.AccountMessage.prototype.clearAccountblocked = function() {
  return this.setAccountblocked(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.AccountMessage.prototype.hasAccountblocked = function() {
  return jspb.Message.getField(this, 42) != null;
};


/**
 * optional AccountUnblocked accountUnblocked = 43;
 * @return {?proto.account.AccountUnblocked}
 */
proto.account.AccountMessage.prototype.getAccountunblocked = function() {
  return /** @type{?proto.account.AccountUnblocked} */ (
    jspb.Message.getWrapperField(this, proto.account.AccountUnblocked, 43));
};


/**
 * @param {?proto.account.AccountUnblocked|undefined} value
 * @return {!proto.account.AccountMessage} returns this
*/
proto.account.AccountMessage.prototype.setAccountunblocked = function(value) {
  return jspb.Message.setOneofWrapperField(this, 43, proto.account.AccountMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.AccountMessage} returns this
 */
proto.account.AccountMessage.prototype.clearAccountunblocked = function() {
  return this.setAccountunblocked(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.AccountMessage.prototype.hasAccountunblocked = function() {
  return jspb.Message.getField(this, 43) != null;
};


/**
 * optional Withdrawn withdrawn = 44;
 * @return {?proto.account.Withdrawn}
 */
proto.account.AccountMessage.prototype.getWithdrawn = function() {
  return /** @type{?proto.account.Withdrawn} */ (
    jspb.Message.getWrapperField(this, proto.account.Withdrawn, 44));
};


/**
 * @param {?proto.account.Withdrawn|undefined} value
 * @return {!proto.account.AccountMessage} returns this
*/
proto.account.AccountMessage.prototype.setWithdrawn = function(value) {
  return jspb.Message.setOneofWrapperField(this, 44, proto.account.AccountMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.AccountMessage} returns this
 */
proto.account.AccountMessage.prototype.clearWithdrawn = function() {
  return this.setWithdrawn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.AccountMessage.prototype.hasWithdrawn = function() {
  return jspb.Message.getField(this, 44) != null;
};


/**
 * optional Deposited deposited = 45;
 * @return {?proto.account.Deposited}
 */
proto.account.AccountMessage.prototype.getDeposited = function() {
  return /** @type{?proto.account.Deposited} */ (
    jspb.Message.getWrapperField(this, proto.account.Deposited, 45));
};


/**
 * @param {?proto.account.Deposited|undefined} value
 * @return {!proto.account.AccountMessage} returns this
*/
proto.account.AccountMessage.prototype.setDeposited = function(value) {
  return jspb.Message.setOneofWrapperField(this, 45, proto.account.AccountMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.AccountMessage} returns this
 */
proto.account.AccountMessage.prototype.clearDeposited = function() {
  return this.setDeposited(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.AccountMessage.prototype.hasDeposited = function() {
  return jspb.Message.getField(this, 45) != null;
};


/**
 * optional WithdrawCancelled withdrawCancelled = 46;
 * @return {?proto.account.WithdrawCancelled}
 */
proto.account.AccountMessage.prototype.getWithdrawcancelled = function() {
  return /** @type{?proto.account.WithdrawCancelled} */ (
    jspb.Message.getWrapperField(this, proto.account.WithdrawCancelled, 46));
};


/**
 * @param {?proto.account.WithdrawCancelled|undefined} value
 * @return {!proto.account.AccountMessage} returns this
*/
proto.account.AccountMessage.prototype.setWithdrawcancelled = function(value) {
  return jspb.Message.setOneofWrapperField(this, 46, proto.account.AccountMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.AccountMessage} returns this
 */
proto.account.AccountMessage.prototype.clearWithdrawcancelled = function() {
  return this.setWithdrawcancelled(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.AccountMessage.prototype.hasWithdrawcancelled = function() {
  return jspb.Message.getField(this, 46) != null;
};


/**
 * optional InvalidOperation invalidOperation = 60;
 * @return {?proto.account.InvalidOperation}
 */
proto.account.AccountMessage.prototype.getInvalidoperation = function() {
  return /** @type{?proto.account.InvalidOperation} */ (
    jspb.Message.getWrapperField(this, proto.account.InvalidOperation, 60));
};


/**
 * @param {?proto.account.InvalidOperation|undefined} value
 * @return {!proto.account.AccountMessage} returns this
*/
proto.account.AccountMessage.prototype.setInvalidoperation = function(value) {
  return jspb.Message.setOneofWrapperField(this, 60, proto.account.AccountMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.AccountMessage} returns this
 */
proto.account.AccountMessage.prototype.clearInvalidoperation = function() {
  return this.setInvalidoperation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.AccountMessage.prototype.hasInvalidoperation = function() {
  return jspb.Message.getField(this, 60) != null;
};


/**
 * optional InsufficientFunds insufficientFunds = 61;
 * @return {?proto.account.InsufficientFunds}
 */
proto.account.AccountMessage.prototype.getInsufficientfunds = function() {
  return /** @type{?proto.account.InsufficientFunds} */ (
    jspb.Message.getWrapperField(this, proto.account.InsufficientFunds, 61));
};


/**
 * @param {?proto.account.InsufficientFunds|undefined} value
 * @return {!proto.account.AccountMessage} returns this
*/
proto.account.AccountMessage.prototype.setInsufficientfunds = function(value) {
  return jspb.Message.setOneofWrapperField(this, 61, proto.account.AccountMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.AccountMessage} returns this
 */
proto.account.AccountMessage.prototype.clearInsufficientfunds = function() {
  return this.setInsufficientfunds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.AccountMessage.prototype.hasInsufficientfunds = function() {
  return jspb.Message.getField(this, 61) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.OpenAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.account.OpenAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.OpenAccount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.OpenAccount.toObject = function(includeInstance, msg) {
  var f, obj = {
    initialamount: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.OpenAccount}
 */
proto.account.OpenAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.OpenAccount;
  return proto.account.OpenAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.OpenAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.OpenAccount}
 */
proto.account.OpenAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInitialamount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.OpenAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.OpenAccount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.OpenAccount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.OpenAccount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInitialamount();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string initialAmount = 1;
 * @return {string}
 */
proto.account.OpenAccount.prototype.getInitialamount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.OpenAccount} returns this
 */
proto.account.OpenAccount.prototype.setInitialamount = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.CloseAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.account.CloseAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.CloseAccount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.CloseAccount.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.CloseAccount}
 */
proto.account.CloseAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.CloseAccount;
  return proto.account.CloseAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.CloseAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.CloseAccount}
 */
proto.account.CloseAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.CloseAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.CloseAccount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.CloseAccount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.CloseAccount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.BlockAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.account.BlockAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.BlockAccount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.BlockAccount.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.BlockAccount}
 */
proto.account.BlockAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.BlockAccount;
  return proto.account.BlockAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.BlockAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.BlockAccount}
 */
proto.account.BlockAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.BlockAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.BlockAccount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.BlockAccount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.BlockAccount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.UnblockAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.account.UnblockAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.UnblockAccount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.UnblockAccount.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.UnblockAccount}
 */
proto.account.UnblockAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.UnblockAccount;
  return proto.account.UnblockAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.UnblockAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.UnblockAccount}
 */
proto.account.UnblockAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.UnblockAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.UnblockAccount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.UnblockAccount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.UnblockAccount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.Withdraw.prototype.toObject = function(opt_includeInstance) {
  return proto.account.Withdraw.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.Withdraw} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.Withdraw.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.Withdraw}
 */
proto.account.Withdraw.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.Withdraw;
  return proto.account.Withdraw.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.Withdraw} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.Withdraw}
 */
proto.account.Withdraw.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.Withdraw.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.Withdraw.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.Withdraw} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.Withdraw.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string amount = 1;
 * @return {string}
 */
proto.account.Withdraw.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.Withdraw} returns this
 */
proto.account.Withdraw.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.Deposit.prototype.toObject = function(opt_includeInstance) {
  return proto.account.Deposit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.Deposit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.Deposit.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.Deposit}
 */
proto.account.Deposit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.Deposit;
  return proto.account.Deposit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.Deposit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.Deposit}
 */
proto.account.Deposit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.Deposit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.Deposit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.Deposit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.Deposit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string amount = 1;
 * @return {string}
 */
proto.account.Deposit.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.Deposit} returns this
 */
proto.account.Deposit.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.CancelWithdraw.prototype.toObject = function(opt_includeInstance) {
  return proto.account.CancelWithdraw.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.CancelWithdraw} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.CancelWithdraw.toObject = function(includeInstance, msg) {
  var f, obj = {
    withdrawcmd: (f = msg.getWithdrawcmd()) && proto.account.Withdraw.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.CancelWithdraw}
 */
proto.account.CancelWithdraw.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.CancelWithdraw;
  return proto.account.CancelWithdraw.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.CancelWithdraw} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.CancelWithdraw}
 */
proto.account.CancelWithdraw.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.account.Withdraw;
      reader.readMessage(value,proto.account.Withdraw.deserializeBinaryFromReader);
      msg.setWithdrawcmd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.CancelWithdraw.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.CancelWithdraw.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.CancelWithdraw} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.CancelWithdraw.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWithdrawcmd();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.account.Withdraw.serializeBinaryToWriter
    );
  }
};


/**
 * optional Withdraw withdrawCmd = 1;
 * @return {?proto.account.Withdraw}
 */
proto.account.CancelWithdraw.prototype.getWithdrawcmd = function() {
  return /** @type{?proto.account.Withdraw} */ (
    jspb.Message.getWrapperField(this, proto.account.Withdraw, 1));
};


/**
 * @param {?proto.account.Withdraw|undefined} value
 * @return {!proto.account.CancelWithdraw} returns this
*/
proto.account.CancelWithdraw.prototype.setWithdrawcmd = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.account.CancelWithdraw} returns this
 */
proto.account.CancelWithdraw.prototype.clearWithdrawcmd = function() {
  return this.setWithdrawcmd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.account.CancelWithdraw.prototype.hasWithdrawcmd = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.AccountOpened.prototype.toObject = function(opt_includeInstance) {
  return proto.account.AccountOpened.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.AccountOpened} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.AccountOpened.toObject = function(includeInstance, msg) {
  var f, obj = {
    initialamount: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.AccountOpened}
 */
proto.account.AccountOpened.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.AccountOpened;
  return proto.account.AccountOpened.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.AccountOpened} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.AccountOpened}
 */
proto.account.AccountOpened.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInitialamount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.AccountOpened.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.AccountOpened.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.AccountOpened} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.AccountOpened.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInitialamount();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string initialAmount = 1;
 * @return {string}
 */
proto.account.AccountOpened.prototype.getInitialamount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.AccountOpened} returns this
 */
proto.account.AccountOpened.prototype.setInitialamount = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 timestamp = 2;
 * @return {number}
 */
proto.account.AccountOpened.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.account.AccountOpened} returns this
 */
proto.account.AccountOpened.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.AccountClosed.prototype.toObject = function(opt_includeInstance) {
  return proto.account.AccountClosed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.AccountClosed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.AccountClosed.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.AccountClosed}
 */
proto.account.AccountClosed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.AccountClosed;
  return proto.account.AccountClosed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.AccountClosed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.AccountClosed}
 */
proto.account.AccountClosed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.AccountClosed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.AccountClosed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.AccountClosed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.AccountClosed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 timestamp = 1;
 * @return {number}
 */
proto.account.AccountClosed.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.account.AccountClosed} returns this
 */
proto.account.AccountClosed.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.AccountBlocked.prototype.toObject = function(opt_includeInstance) {
  return proto.account.AccountBlocked.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.AccountBlocked} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.AccountBlocked.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.AccountBlocked}
 */
proto.account.AccountBlocked.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.AccountBlocked;
  return proto.account.AccountBlocked.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.AccountBlocked} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.AccountBlocked}
 */
proto.account.AccountBlocked.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.AccountBlocked.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.AccountBlocked.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.AccountBlocked} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.AccountBlocked.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 timestamp = 1;
 * @return {number}
 */
proto.account.AccountBlocked.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.account.AccountBlocked} returns this
 */
proto.account.AccountBlocked.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.AccountUnblocked.prototype.toObject = function(opt_includeInstance) {
  return proto.account.AccountUnblocked.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.AccountUnblocked} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.AccountUnblocked.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.AccountUnblocked}
 */
proto.account.AccountUnblocked.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.AccountUnblocked;
  return proto.account.AccountUnblocked.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.AccountUnblocked} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.AccountUnblocked}
 */
proto.account.AccountUnblocked.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.AccountUnblocked.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.AccountUnblocked.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.AccountUnblocked} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.AccountUnblocked.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 timestamp = 1;
 * @return {number}
 */
proto.account.AccountUnblocked.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.account.AccountUnblocked} returns this
 */
proto.account.AccountUnblocked.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.Withdrawn.prototype.toObject = function(opt_includeInstance) {
  return proto.account.Withdrawn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.Withdrawn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.Withdrawn.toObject = function(includeInstance, msg) {
  var f, obj = {
    seqnumber: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 2, ""),
    currentbalance: jspb.Message.getFieldWithDefault(msg, 3, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.Withdrawn}
 */
proto.account.Withdrawn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.Withdrawn;
  return proto.account.Withdrawn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.Withdrawn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.Withdrawn}
 */
proto.account.Withdrawn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeqnumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrentbalance(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.Withdrawn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.Withdrawn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.Withdrawn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.Withdrawn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeqnumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCurrentbalance();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional string seqNumber = 1;
 * @return {string}
 */
proto.account.Withdrawn.prototype.getSeqnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.Withdrawn} returns this
 */
proto.account.Withdrawn.prototype.setSeqnumber = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string amount = 2;
 * @return {string}
 */
proto.account.Withdrawn.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.Withdrawn} returns this
 */
proto.account.Withdrawn.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string currentBalance = 3;
 * @return {string}
 */
proto.account.Withdrawn.prototype.getCurrentbalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.Withdrawn} returns this
 */
proto.account.Withdrawn.prototype.setCurrentbalance = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 timestamp = 4;
 * @return {number}
 */
proto.account.Withdrawn.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.account.Withdrawn} returns this
 */
proto.account.Withdrawn.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.Deposited.prototype.toObject = function(opt_includeInstance) {
  return proto.account.Deposited.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.Deposited} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.Deposited.toObject = function(includeInstance, msg) {
  var f, obj = {
    seqnumber: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 2, ""),
    currentbalance: jspb.Message.getFieldWithDefault(msg, 3, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.Deposited}
 */
proto.account.Deposited.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.Deposited;
  return proto.account.Deposited.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.Deposited} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.Deposited}
 */
proto.account.Deposited.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeqnumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrentbalance(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.Deposited.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.Deposited.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.Deposited} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.Deposited.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeqnumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCurrentbalance();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional string seqNumber = 1;
 * @return {string}
 */
proto.account.Deposited.prototype.getSeqnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.Deposited} returns this
 */
proto.account.Deposited.prototype.setSeqnumber = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string amount = 2;
 * @return {string}
 */
proto.account.Deposited.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.Deposited} returns this
 */
proto.account.Deposited.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string currentBalance = 3;
 * @return {string}
 */
proto.account.Deposited.prototype.getCurrentbalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.Deposited} returns this
 */
proto.account.Deposited.prototype.setCurrentbalance = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 timestamp = 4;
 * @return {number}
 */
proto.account.Deposited.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.account.Deposited} returns this
 */
proto.account.Deposited.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.WithdrawCancelled.prototype.toObject = function(opt_includeInstance) {
  return proto.account.WithdrawCancelled.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.WithdrawCancelled} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.WithdrawCancelled.toObject = function(includeInstance, msg) {
  var f, obj = {
    seqnumber: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 2, ""),
    currentbalance: jspb.Message.getFieldWithDefault(msg, 3, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.WithdrawCancelled}
 */
proto.account.WithdrawCancelled.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.WithdrawCancelled;
  return proto.account.WithdrawCancelled.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.WithdrawCancelled} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.WithdrawCancelled}
 */
proto.account.WithdrawCancelled.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeqnumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrentbalance(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.WithdrawCancelled.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.WithdrawCancelled.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.WithdrawCancelled} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.WithdrawCancelled.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeqnumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCurrentbalance();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional string seqNumber = 1;
 * @return {string}
 */
proto.account.WithdrawCancelled.prototype.getSeqnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.WithdrawCancelled} returns this
 */
proto.account.WithdrawCancelled.prototype.setSeqnumber = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string amount = 2;
 * @return {string}
 */
proto.account.WithdrawCancelled.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.WithdrawCancelled} returns this
 */
proto.account.WithdrawCancelled.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string currentBalance = 3;
 * @return {string}
 */
proto.account.WithdrawCancelled.prototype.getCurrentbalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.WithdrawCancelled} returns this
 */
proto.account.WithdrawCancelled.prototype.setCurrentbalance = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 timestamp = 4;
 * @return {number}
 */
proto.account.WithdrawCancelled.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.account.WithdrawCancelled} returns this
 */
proto.account.WithdrawCancelled.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.InvalidOperation.prototype.toObject = function(opt_includeInstance) {
  return proto.account.InvalidOperation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.InvalidOperation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.InvalidOperation.toObject = function(includeInstance, msg) {
  var f, obj = {
    reason: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.InvalidOperation}
 */
proto.account.InvalidOperation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.InvalidOperation;
  return proto.account.InvalidOperation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.InvalidOperation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.InvalidOperation}
 */
proto.account.InvalidOperation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.InvalidOperation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.InvalidOperation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.InvalidOperation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.InvalidOperation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string reason = 1;
 * @return {string}
 */
proto.account.InvalidOperation.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.account.InvalidOperation} returns this
 */
proto.account.InvalidOperation.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.account.InsufficientFunds.prototype.toObject = function(opt_includeInstance) {
  return proto.account.InsufficientFunds.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.account.InsufficientFunds} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.InsufficientFunds.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.account.InsufficientFunds}
 */
proto.account.InsufficientFunds.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.account.InsufficientFunds;
  return proto.account.InsufficientFunds.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.account.InsufficientFunds} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.account.InsufficientFunds}
 */
proto.account.InsufficientFunds.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.account.InsufficientFunds.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.account.InsufficientFunds.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.account.InsufficientFunds} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.account.InsufficientFunds.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.account);
